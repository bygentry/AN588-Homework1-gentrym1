---
title: "Intro to Survival Analysis"
author: "Soumalya, Tiffany, Kacy, Benjamin, Carly"
format: html
editor: visual
---

## Module 20

### Preliminaries

```{r}
#| label: Packages

install.packages(c("survival", "survminer", "cmprsk", "tidycmprsk", "patchwork"), repos = "http://cran.us.r-project.org")

library(survival)
library(survminer)
library(ggplot2)
library(cmprsk)
library(dplyr)
library(tidyr)
library(tidycmprsk)
library(patchwork)
```

### What is survival analysis?

### Key Concepts

## Challenge 1

### **Fitting the Kaplan-Meier Survival Model**

The **Kaplan–Meier estimator**, also known as the **product limit estimator**, is a non-parametric statistic used to estimate the survival function from lifetime data. In medical research, it is often used to measure the fraction of patients living for a certain amount of time after treatment. In other fields, Kaplan–Meier estimators may be used to measure the length of time people remain unemployed after a job loss, the time-to-failure of machine parts, or in our case, the amount of time a patient survived after being diagnosed for a disease.

For this challenge, we will start with a basic dataset of twelve Colon cancer patients in a study who have survived after diagnosis.

We will now read the dataset (Csurv) which I prepared specially for this challenge:

```{r}
library(readxl)

github_url <- "https://raw.githubusercontent.com/imcarlyy/survival_analysis/main/Csurv.xlsx"
temp_file <- tempfile(fileext = ".xlsx")  # Create a temporary file
download.file(github_url, temp_file, mode = "wb")  # 'wb' for binary (Excel files)
Csurv <- read_excel(temp_file)  # Read the downloaded file
unlink(temp_file)  # Delete the temporary file
```

Now I will check the names of the variables given in this table.

```{r}
names(Csurv)
```

```{r}
attach(Csurv) #Since, the dataset is small (n=12) we can take a look at it entirely here:
Csurv
```

It is very important to know while working with survival analysis datasets what the 0 and 1 stands for.

In this example we are considering Death: 1=event has occurred (death) and 0=no event (they are censored; meaning they have left the study and hence we do not know whether they have data on them at the given point of time).

So, in this dataset if we look at first column, the 1st individual died at 2 months from the start of the study (Time=2, Death=1), the 2nd individual was censored at 3 months (Time=3, Death=0), the 3rd individual died at 6 months (Time=6, Death=1) and so on.

Now we will look into the Kaplan-Meier to fit into this dataset.

In order to do this, we need to load the survival library into R. Now, the survival library is already built into base R, so we do not need to install this package, but we do need to load the package to use these survival commands.

Now in order the fit the K-M model, we will use this survfit command and so I am going to fit a survival analysis, store it in an object called km.model:

```{r}
km.model<-survfit(Surv(Time, Death)~1, type="kaplan-meier")
```

Here, I am going to let R know the type is kaplan-meier (if we do not specify the type it will fit the kaplan-meier by default so it wouldn’t have been an issue)

Now the way we specify the survival time or the y variable is using a capital S; so it’s Surv (survival) and then in parentheses we need to give it both the time the individual was followed for as well the indicator of whether the event occured (they died) or if they were censored {*Surv(Time, Death)* tilde 1} and the reason we have one here is that for this dataset we don’t actually have any x variables. This is the way we let R know that we are just estimating survival without using any particular X variables.

Now that the model has been fit, we can ask a few summaries…

```{r}
km.model #Summary of the K-M model
```

The output we are getting here is the total number of individuals is 12, number of events is 10 (10 deaths and 2 censored observations), median survival time so, in this case half the people survived beyond 15 months, half did not. We have also returned a 95% confidence interval for the median which means that we are 95% confident that median survival is somewhere between 7 months and infinity. This dataset is very small so here we do not have a upper limit for confidence interval around the median survival.

We can also ask for the summary of the model:

```{r}
summary(km.model)
```

Here we can see that at time 2, there were 12 individuals at risk, 1 death occurred, the probability of surviving beyond 2 months is 91.7%. We also have a standard error associated with that survival (0.0798) as well as a 95% CI (ie. we are 95% confident that beyond 2 months the patients survival chances are between 77.3% upto a 100%). Similary, at time 6, there are 10 individuals at risk, 2 individuals died and so the probabilty of surviving beyond 6 months is 73.3%. Again, the standard error at 6 months is 0.1324 and we are 95% confident that there’s somewhere between 51.5 upto 100% chance of surviving 6 months. Now these are extremely wide confidence intervals because the sample size is so small. This dataset is useful for introducing the idea of Kaplan-Meier survival model but for a real study, we would have a same size of much greater than 12.

Now we can ask R to make a plot of this model. To do that we can ask R to plot the K-M model. So R will plot the Kaplan-Meier model that was fit saying confidence interval=F (or False). It tells R to not put a confidence interval around the survival function. xlab and ylab are giving the plot x-axis and y-axis labels and the main is the title.

```{r}
plot(km.model, conf.int=F, xlab="Time (months)",ylab="%Alive = S(t)", main="K-M Model")
```

As we can see, a plot of the Kaplan–Meier is a series of declining horizontal steps.

Now if we wanted to we can ask R to put confidence interval or confidence bands around this survival function. To do so we would just set conf.int=T (or True). I will also set las=1 (this will rotate the values on the y-axis. So, here’s what it will look like:

```{r}
plot(km.model, conf.int=T, xlab="Time (months)", ylab="%Alive = S(t)", main="K-M Model", las=1)
```

We can see now these dashed lines give us confidence interval around the survival function and we can also see that las = 1 argument rotated the values on y-axis.

Now I am going to add a red horizontal line at S(t) = 50% into this plot:

```{r}
plot(km.model, conf.int=T, xlab="Time (months)", ylab="%Alive = S(t)", main="K-M Model", las=1)
abline(h=0.5, col="red")
```

The red line is at 50% meaning 50% surviving 50% not. Hence, this is how we look at the median survival. Here the red line crosses the survival function right at the 15 months (this is our median). The red line passes the dashed line for lower limit at 7 months and it never hits the dashed line for upper limit (because of the smaller sample size).

Now, I am going to produce the same plot again but added mark.time=TRUE and this will add in little tick marks wherever there was a censored observation. So if you remember there was observations censored at 3 and at 10 months. So, here’s the code:

```{r}
plot(km.model, conf.int=T, xlab="Time (months)", ylab="%Alive = S(t)", main="K-M Model", las=1, mark.time=TRUE)
```

This helps us visualize where and when observations are censored.

Now, let’s include a x variable into fitting this model. I will continue on the same cancer patient dataset (those 12 individuals were all under 40 years old) and will add in more data points and this is going to be a group of individuals who are over 40 years old (another column Over40 will be added)

```{r}
rm(Csurv)
library(readxl)

github_url2 <- "https://raw.githubusercontent.com/imcarlyy/survival_analysis/main/Csurv40.xlsx"
temp_file2 <- tempfile(fileext = ".xlsx")  # Creates a temporary file path
download.file(github_url2, temp_file2, mode = "wb")  # Saves to temp_file2 (not temp_file)
Csurv40 <- read_excel(temp_file2)  # Reads from temp_file2
unlink(temp_file2)  # Deletes temp_file2
```

Taking a quick look at the new table:

```{r}
head(Csurv40)
```

```{r}
tail(Csurv40)
```

Over40=0 : not over 40 years old; Over40=1: Over 40 years old

Now let’s fit the K-M Model (say km.model2), relating over/under40 to survival and see if there is a relationship between survival and age:

```{r}
km.model2<-survfit(Surv(Time, Death)~Over40, type="kaplan-meier", data=Csurv40)
```

Plotting this:

```{r}
plot(km.model2, conf.int=F, xlab="Time (months)", ylab="%Alive = S(t)", main="K-M Model", data=Csurv40) #conf.int=F, so we will not put the confidence bands on there for now.
```

As we can see, we clearly see a difference between under 40 and over 40 groups: Under 40 groups have a higher chance of survival than over 40 groups.

Let’s do some summaries:

```{r}
summary(km.model2)
```

```{r}
km.model2
```

Now, let’s make that same plot again but adding some colours, a legend and a tick at the time of censored events:

```{r}
plot(km.model2, conf.int=F, xlab="Time (months)", ylab="%Alive = S(t)", main="K-M Model", col=c("red","blue"), las=1, lwd=2, mark.time=TRUE, data=Csurv40 )
```

```{r}
legend(18, 0.95, legend=c("Under 40 years", "Over 40 years"), lty=1, lwd=2, col=c("red", "blue"), bty="",cex=0.6) #adding a legend
```

An important question:

Are two survival functions are statistically significantly different? Or do you think that the survival differs if someone is over or under 40?

YES! Survival (Probability of surviving beyond a certain time) changes depending on if someone’s over or under 40. Here I will talk about the formal test for doing this.

Here comes the **Log-Rank Test**: It is a way of testing if there is a significant difference between the two survival curve. It is also known as the Mantle Hansel test.

```{r}
#Log-Rank Test
#Null Hypothesis: Survival for two groups is same
#Hypothesis1: Survival for two groups is not same
survdiff(Surv(Time, Death)~Over40, data=Csurv40)
```

Test-statistic is 4.8, the p-value is 0.03. Based on this small p-value, we can reject our null hypothesis. We have evidence to believe that survival is not the same depending on if you are over or under 40.

## **Challenge 2:**

### **Cox proportional hazard model: Checking the proportional hazards assumption**

Let’s say you want to assess the role of different variables in your data in survival times. There are many models and methods to do so but the most common is to use the Cox Proportional Hazard model. First introduced in 1972, this model allows you to assess the hazard at a certain time given a specific covariate. In math terms, under the cox model our hazard function is: \[image\] (image didnt load)

Where the hazard at time t given your covariate X is equal to your baseline hazard function (with all covariates equal to 0), multiplied by your exponential function exp(BX), a multiplicative way of assessing the covariates influence on overall hazard.

Let’s load in our datasets.

```{r}
data(cancer)
```

As before we’ll make a survival object based on some of our data. In this case let’s use the lung cancer survival dataset:

```{r}
sv1 <- survfit(Surv(time, status) ~ 1, data = lung)
```

The Survival package makes fitting a CPH model to your data very easy, with just the coxph function. Say we wanted to fit a Cox regression based on age to our cancer mortality data:

```{r}
cx_age <- coxph(Surv(time, status) ~ age, data = lung)
cx_age
```

However, the CPH model makes some assumptions!

1.  The covariates that you’re testing are constant over time.

2.  Hazard ratios/proportions do not vary over time.

The second one is the most important. Put simply it means that the proportion of hazard between groups in your model is the same at every time point. This is referred to as the “proportional hazards assumption” and is the reason it’s called the Cox *Proportional Hazard* model. This limits the model’s utility, and means that we need to test to see if our data can be used with the cox model. Luckily the survival package makes this pretty straightforward using the cox.zph() function:

```{r}
cox.zph(cx_age)
```

The function returns a p value of 0.56, which is far above even our least stringent alpha levels so we can be pretty confident that our age data does not violate the proportional hazard assumption. Hooray!

Let’s have a look at our cox model based on age again:

```{r}
cx_age
```

The coefficient is positive, so we’re seeing a slight increase in the risk of an “event” (in this case death) due to age, with a significant p-value of 0.0419. Though note that this p-value is on the higher end, so we might want to take this result with a grain of salt.

### **Try it on your own!**

Fit a CPH model to the cancer data, looking at sex in addition to age. Does our model using sex violate the proportional hazard assumption? How does it’s p-value compare to that of age? What might account for this?

```{r}
cx_sex <- coxph(Surv(time, status) ~ sex + age, data = lung)
cox.zph(cx_sex)
```

```{r}
cx_sex
```

Curiously, sex is showing a strong negative coefficient, indicating that it’s having a strong protective effect (i.e. females are surviving longer than males in this dataset), and our p-value for that is 0.002, which is significant by most metrics! That said, if we look at the cox proportional hazard assumption test our p-value associated with sex is pretty low, at 0.11. This is a little concerning, since while we’re still technically above an alpha threshold of 0.05, we might be concerned that our sex covariate is violating the proportional hazard assumption. What do our survival curves look like?

```{r}
plot_1 <- ggsurvplot(
  survfit(Surv(time, status) ~ sex, data = lung),
  legend.labs = c("Male", "Female"),
  palette = c("purple","forestgreen"),
  conf.int = T
  )
plot_1
```

Hmm, our survival plots seem to be drawing together towards the end of the timeframe we’re looking at. Perhaps that accounts for the low p-value in our proportional hazard test. What happens if we remove the individuals near the ends of the curves?

```{r}
lung_short <- lung %>% 
  filter(
    time < 700
  ) %>% 
  filter(
    time > 50
  )
cx_sex2 <- coxph(Surv(time, status) ~ sex + age, data = lung_short)
cox.zph(cx_sex2)
```

```{r}
ggsurvplot(
  survfit(Surv(time, status) ~ sex, data = lung_short),
  legend.labs = c("Male", "Female"),
  palette = c("purple","forestgreen"),
  conf.int = T
  )
```

Ahh, interesting! If we omit the mortality events that occurred very early and very late in our time series data, the proportional hazard due to our sex variable becomes a lot more constant. Interestingly doing this also seems to drop our age p-value, but both are now far above what we would consider a significant violation of the proportional hazard assumption.

## **Challenge 3:**

Now let’s try what we’ve learned with some other data sets. Have a look at the colon dataset provided by the survival package. This is a survival dataset for patients with colon cancer in a chemotherapy treatment trial, with the “rx” column indicating what treatment the patients received (either “Obs” for observation only, “rxLev” for treatment with just levamisole, or “rxLev + 5FU” for levamisole & the chemotherapy agent 5-FU). Does the rx covariate violate the proportional hazard assumption? What do the survival curves look like for this data when we segregate based on treatment? Does the chemotherapy seem to work?

```{r}
head(colon)
```

```{r}
ggsurvplot(
  survfit(Surv(time, status) ~ 1, data = colon),
  conf.int = T
  )
```

```{r}
colon_cox <- coxph(Surv(time, status) ~ rx, data = colon)
cox.zph(colon_cox)
```

```{r}
colon_cox
```

```{r}
ggsurvplot(
  survfit(Surv(time, status) ~ rx, data = colon),
  conf.int = T,
  pval = T,
  pval.method = T
  )
```

## **Challenge 4:**

One of the most common test in survival analysis is a nonparametric test known as **log-rank test,** which compares survival curves under the assumption of **proportional hazards**. It tests whether there is a **statistically significant difference** in survival between groups over time.

H0:S_1(t)=S2(t) for all t H0:S1(t)=S2(t) for all t

HA:S_1(t)≠S2(t) for some t HA:S1(t)≠S2(t) for some t

The null hypothesis states that **survival functions** S1(t)S1(t) and S2(t)S2(t) for the two groups are **equal at all time points** tt**,** there is **no difference in survival** between groups over time. While the alternative hypothesis states that the **survival functions** are **not equal at some time point** tt, so there is **a difference** in survival between the two groups.

How the log-rank test works is that is compares the **observed** number of events (e.g., deaths) in each group to the expected number under the assumptions that all group have the same survival experience. So it sums the differences over the entire study period.

X2=(O1−E1)2V1X2=(O1−E1)2V1

Where:

-   O1 is the observed number of events in group 1

-   E1 is the expected number of events in group 1

-   V1 is the variance of difference

-   This statistic follows the chi-squared distribution with 1 degree of freedom

In R, we will be using the `survdiff()` function from the `{survival}` package to perform comparisons between two groups.

Lets first compare survival times between males and females in the `Lung` dataset to help us answer the question:

-   Is there a statistically significant difference in survival times between males and females?

```{r}
head(lung) #Display the first 6 rows of the lung dataset
```
